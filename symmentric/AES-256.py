rcon = [[0x01, 0, 0, 0], 
        [0x02, 0, 0, 0], 
        [0x04, 0, 0, 0], 
        [0x08, 0, 0, 0], 
        [0x10, 0, 0, 0], 
        [0x20, 0, 0, 0], 
        [0x40, 0, 0, 0], 
        [0x80, 0, 0, 0], 
        [0x1b, 0, 0, 0], 
        [0x36, 0, 0, 0]]
        
sbox =  [
    [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76], 
    [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0], 
    [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15], 
    [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75], 
    [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84], 
    [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf], 
    [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8], 
    [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2], 
    [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73], 
    [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb], 
    [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79], 
    [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08], 
    [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a], 
    [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e], 
    [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf], 
    [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16] 
]

sbox_inv = [
    [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb],
    [0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb],
    [0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e],
    [0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25],
    [0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92],
    [0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84],
    [0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06],
    [0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b],
    [0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73],
    [0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e],
    [0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b],
    [0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4],
    [0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f],
    [0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef],
    [0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61],
    [0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]
]
rounds = 14 #AES-256 round
nk = 8  #AES-256 rcon

def gf_mul(a, b): #GaluaField calculation
    p = 0
    for i in range(8):
        if b & 1:
            p ^= a
        carry = a & 0x80
        a <<= 1
        if carry:
            a ^= 0x1b
        b >>= 1
    return p & 0xFF

def expand_round_key(key): #made key 4 * (round+1)
    w = [key[i:i+8] for i in range(0,len(key),8)]
    #print(round_keys)
    wIndex=8
    
    #key_expansion
    while (wIndex < 4*(rounds+1)):        
        temp = w[wIndex-1]
   
        if wIndex % 8 == 0:
            rotWord= temp[2:]+temp[:2]
            subWord = ''.join([hex(sbox[int(rotWord[i], 16)][int(rotWord[i+1], 16)])[2:].zfill(2) for i in range(0, len(rotWord), 2)])
            temp = hex(int(subWord[0:2],16)^rcon[wIndex//nk-1][0])[2:].zfill(2)+subWord[2:]
            
        elif nk > 6 and wIndex % 8 ==4:
            subWord = ''.join([hex(sbox[int(temp[i], 16)][int(temp[i+1], 16)])[2:].zfill(2) for i in range(0, len(rotWord), 2)])
            temp = subWord
        
        w.append(hex(int(temp,16)^int(w[wIndex-nk],16))[2:].zfill(8))
            
        wIndex+=1
    return w
        
def transpose(state):
    pairs = [state[i:i+2] for i in range(0, len(state), 2)]
    m = [pairs[i:i+4] for i in range(0, len(pairs), 4)]
    return ''.join(m[j][i] for i in range(4) for j in range(4))

def made2array(state):
    pairs = [state[i:i+2] for i in range(0, len(state), 2)]
    m = [pairs[i:i+4] for i in range(0, len(pairs), 4)]
    return m

def add_round_key(text, key):
    key = transpose(''.join(key))
    return hex(int(text,16)^int(key,16))[2:].zfill(32)

def subBytes(state):
    return ''.join([hex(sbox[int(state[i], 16)][int(state[i+1], 16)])[2:].zfill(2) for i in range(0, len(state), 2)])

def subBytes_inv(state):
    return ''.join([hex(sbox_inv[int(state[i], 16)][int(state[i+1], 16)])[2:].zfill(2) for i in range(0, len(state), 2)])

def shiftRows(state):
    divide_state = made2array(state)
    state = [[divide_state[0][0],divide_state[0][1],divide_state[0][2],divide_state[0][3]],
            [divide_state[1][1],divide_state[1][2],divide_state[1][3],divide_state[1][0]],
            [divide_state[2][2],divide_state[2][3],divide_state[2][0],divide_state[2][1]],
            [divide_state[3][3],divide_state[3][0],divide_state[3][1],divide_state[3][2]]]
    
    return ''.join([str(state[i][j]) for i in range(4) for j in range(4)])

def shiftRows_inv(state):
    divide_state = made2array(state)
    state = [[divide_state[0][0],divide_state[0][1],divide_state[0][2],divide_state[0][3]],
            [divide_state[1][3],divide_state[1][0],divide_state[1][1],divide_state[1][2]],
            [divide_state[2][2],divide_state[2][3],divide_state[2][0],divide_state[2][1]],
            [divide_state[3][1],divide_state[3][2],divide_state[3][3],divide_state[3][0]]]
    
    return ''.join([str(state[i][j]) for i in range(4) for j in range(4)])


def mixColumns(state):
    state = transpose(state)
    s = [0] * 16
    state = [state[i:i+2] for i in range(0,len(state),2)]
    for i in range(4):
      a = [int(state[j], 16) for j in range(i*4, (i+1)*4)]
      s[i] =hex(gf_mul(a[0], 2) ^ gf_mul(a[1], 3) ^ a[2] ^ a[3])[2:].zfill(2)
      s[i + 4] = hex(a[0] ^ gf_mul(a[1], 2) ^ gf_mul(a[2], 3) ^ a[3])[2:].zfill(2)
      s[i + 8] = hex(a[0] ^ a[1] ^ gf_mul(a[2], 2) ^ gf_mul(a[3], 3))[2:].zfill(2)
      s[i + 12] = hex(gf_mul(a[0], 3) ^ a[1] ^ a[2] ^ gf_mul(a[3], 2))[2:].zfill(2)
    s = ''.join(s[i] for i in range(len(s)))
    return s

def mixColumns_inv(state):
    state = transpose(state)
    s = [0] * 16
    state = [state[i:i+2] for i in range(0,len(state),2)]
    for i in range(4):
      a = [int(state[j], 16) for j in range(i*4, (i+1)*4)]
      s[i] = hex(gf_mul(a[0], 14) ^ gf_mul(a[1], 11) ^ gf_mul(a[2], 13) ^ gf_mul(a[3], 9))[2:].zfill(2)
      s[i + 4] = hex(gf_mul(a[0], 9) ^ gf_mul(a[1], 14) ^ gf_mul(a[2], 11) ^ gf_mul(a[3], 13))[2:].zfill(2)
      s[i + 8] = hex(gf_mul(a[0], 13) ^ gf_mul(a[1], 9) ^ gf_mul(a[2], 14) ^ gf_mul(a[3], 11))[2:].zfill(2)
      s[i + 12] = hex(gf_mul(a[0], 11) ^ gf_mul(a[1], 13) ^ gf_mul(a[2], 9) ^ gf_mul(a[3], 14))[2:].zfill(2)
    
    s = ''.join(s[i] for i in range(len(s)))
    return s
    
def encrypt(plaintext, key):
    round_key = expand_round_key(key)
    plaintext = transpose(plaintext)
    roundStart = add_round_key(plaintext, round_key[0:4])
    
    
    for roundIndex in range(1,rounds):
        substituteState = subBytes(roundStart)
        shiftState = shiftRows(substituteState)
        mixColumnState = mixColumns(shiftState)
        roundStart = add_round_key(mixColumnState, round_key[roundIndex*4:(roundIndex+1)*4])
        
    substituteState = subBytes(roundStart)
    shiftState = shiftRows(substituteState)
    ciphertext= add_round_key(shiftState,round_key[4*(roundIndex+1):])
    
    return transpose(ciphertext)



def decrypt(ciphertext, key):
    round_key = expand_round_key(key)
    ciphertext = transpose(ciphertext)
    
    roundStart = add_round_key(ciphertext, round_key[-4:])
    shiftState = shiftRows_inv(roundStart)
    substituteState = subBytes_inv(shiftState)
    
    for roundIndex in range(rounds-1,0,-1):
        roundStart = add_round_key(substituteState, round_key[roundIndex*4:(roundIndex+1)*4])
        mixColumnState = mixColumns_inv(roundStart)
        shiftState = shiftRows_inv(mixColumnState)
        substituteState = subBytes_inv(shiftState) 
    plaintext = add_round_key(substituteState, round_key[:4])
            
    return transpose(plaintext)


if __name__ == "__main__":
    plaintext = "00112233445566778899aabbccddeeff" #16byte
    key = "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f" #32byte AES-256
    
    print("Plaintext : "+plaintext)
    encryption = encrypt(plaintext, key)
    print("AES-256 Encryption : "+encryption)
    decryption = decrypt(encryption, key)
    print("AES-256 Decryption : "+decryption)
